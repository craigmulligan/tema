{"version":3,"sources":["constants/Colors.js","components/TabBarIcon.js","firebase/index.js","constants/Api.js","utils/index.js","components/MessageList.js","components/MessageInput.js","screens/HomeScreen.js","screens/LinksScreen.js","navigation/BottomTabNavigator.js","App.js","navigation/useLinking.js","web-build/register-service-worker.js","timer-config.js","assets/fonts/SpaceMono-Regular.ttf"],"names":["TabBarIcon","props","Ionicons","name","size","style","marginBottom","color","focused","Colors","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","COLLECTIONS","colorHash","dark","ColorHash","light","lightness","styles","StyleSheet","create","container","flex","backgroundColor","calloutText","textAlign","padding","message","borderLeftWidth","flexDirection","messageText","flexGrow","Message","d","item","onPress","TouchableOpacity","hex","threadRef","id","borderLeftColor","Text","text","messageMeta","Date","createdAt","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","Callout","View","MessageList","listRef","React","refreshing","setRefreshing","lists","setLists","collection","orderBy","limit","onSnapshot","snapshot","newMessages","forEach","doc","unshift","data","msgs","arr","key","seenKeys","result","x","k","push","removeDuplicates","current","setTimeout","scrollToEnd","useMessages","messages","setMessages","FlatList","ref","list","refreshControl","onRefresh","first","startAfter","get","then","prevMessages","docs","map","reverse","catch","keyExtractor","renderItem","ListFooterComponent","minHeight","alignItems","input","paddingLeft","paddingRight","button","justifyContent","buttonText","MessageInput","setText","TextInput","multiline","placeholder","onChangeText","value","Error","add","now","HomeScreen","selectedMessage","selectMessage","navigationOptions","header","developmentModeText","fontSize","lineHeight","contentContainer","paddingTop","welcomeContainer","marginTop","welcomeImage","width","height","resizeMode","marginLeft","getStartedContainer","marginHorizontal","homeScreenFilename","marginVertical","codeHighlightText","codeHighlightContainer","borderRadius","paddingHorizontal","getStartedText","tabBarInfoContainer","position","bottom","left","right","Platform","select","ios","shadowColor","shadowOffset","shadowOpacity","shadowRadius","android","elevation","paddingVertical","tabBarInfoText","navigationFilename","helpContainer","helpLink","helpLinkText","LinksScreen","contentContainerStyle","optionIconContainer","marginRight","option","borderWidth","hairlineWidth","borderBottomWidth","borderColor","lastOption","optionText","alignSelf","BottomTab","createBottomTabNavigator","BottomTabNavigator","navigation","route","setOptions","headerTitle","getHeaderTitle","Navigator","initialRouteName","Screen","component","options","title","tabBarIcon","state","routes","index","Stack","createStackNavigator","App","isLoadingComplete","setLoadingComplete","initialNavigationState","setInitialNavigationState","containerRef","getInitialState","useLinking","prefixes","Linking","makeUrl","config","Root","path","screens","Home","Links","Settings","a","async","SplashScreen","preventAutoHide","Font","font","require","console","warn","hide","skipLoadingScreen","OS","StatusBar","barStyle","NavigationContainer","initialState","navigator","window","addEventListener","serviceWorker","register","scope","info","error","_setTimeout","global","_clearTimeout","clearTimeout","timerFix","runTask","fn","ttl","args","waitingTime","InteractionManager","runAfterInteractions","afterTime","Math","min","time","Object","keys","length","startsWith","module","exports"],"mappings":"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","file":"static/js/app.f43b0cda.chunk.js","sourcesContent":["const tintColor = '#2f95dc';\n\nexport default {\n  tintColor,\n  tabIconDefault: '#ccc',\n  tabIconSelected: tintColor,\n  tabBar: '#fefefe',\n  errorBackground: 'red',\n  errorText: '#fff',\n  warningBackground: '#EAEB5E',\n  warningText: '#666804',\n  noticeBackground: tintColor,\n  noticeText: '#fff',\n};\n","import { Ionicons } from '@expo/vector-icons';\nimport * as React from 'react';\n\nimport Colors from '../constants/Colors';\n\nexport default function TabBarIcon(props) {\n  return (\n    <Ionicons\n      name={props.name}\n      size={30}\n      style={{ marginBottom: -3 }}\n      color={props.focused ? Colors.tabIconSelected : Colors.tabIconDefault}\n    />\n  );\n}\n","// Your web app's Firebase configuration\nimport * as firebase from 'firebase';\nimport \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: 'AIzaSyBfhiy7EVdQQlr54gyKSj9Ahy4PElctPVM',\n  authDomain: 'dolos-1.firebaseapp.com',\n  databaseURL: 'https://dolos-1.firebaseio.com',\n  projectId: 'dolos-1',\n  storageBucket: 'dolos-1.appspot.com',\n  messagingSenderId: '137439467118',\n  appId: '1:137439467118:web:423bf732e9757370e0b87f',\n  measurementId: 'G-MBGZJGZNGQ'\n}\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig)\n// firebase.analytics()\n\nexport const db = firebase.firestore()\nexport default firebase\n","export const COLLECTIONS = {\n  messages: 'messages',\n  threads: 'threads'\n}\n","import ColorHash from 'color-hash'\n\nexport const colorHash = {\n  dark: new ColorHash(),\n  light: new ColorHash({\n    lightness: 0.8\n  })\n}\n\nexport function printDate(d) {\n  return (\n    d.getFullYear() +\n    '-' +\n    (d.getMonth() + 1) +\n    '-' +\n    d.getDate() +\n    ' ' +\n    d.getHours() +\n    ':' +\n    d.getMinutes() +\n    ':' +\n    d.getSeconds()\n  )\n}\n\nexport function removeDuplicates(arr, key) {\n  const seenKeys = {}\n  const result = []\n\n  arr.forEach(x => {\n    const k = x[key]\n    if (seenKeys[k]) {\n      // we've already got in the result set\n      return\n    }\n\n    result.push(x)\n    seenKeys[k] = true\n  })\n\n  return result\n}\n","import * as React from 'react'\nimport {\n  FlatList,\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity\n} from 'react-native'\nimport { db } from '../firebase'\nimport { COLLECTIONS } from '../constants/Api'\nimport { printDate, colorHash, removeDuplicates } from '../utils'\nimport { RefreshControl } from 'react-native-web-refresh-control'\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#F0f0f0f0'\n  },\n  calloutText: {\n    textAlign: 'center',\n    padding: 10\n  },\n  message: {\n    padding: 50,\n    flex: 1,\n    borderLeftWidth: 10,\n    flexDirection: 'row'\n  },\n  messageText: {\n    flexGrow: 8\n  },\n  messageText: {\n    flexGrow: 2\n  }\n})\n\nfunction Message({ item, onPress }) {\n  return (\n    <TouchableOpacity\n      onPress={() => onPress(item)}\n      style={[\n        styles.message,\n        {\n          backgroundColor: colorHash.light.hex(item.threadRef.id),\n          borderLeftColor: colorHash.dark.hex(item.threadRef.id)\n        }\n      ]}\n    >\n      <Text style={styles.messageText}>{item.text}</Text>\n      <Text style={styles.messageMeta}>\n        {printDate(new Date(item.createdAt))}\n      </Text>\n    </TouchableOpacity>\n  )\n}\n\nfunction Callout({ onPress, threadRef }) {\n  if (threadRef) {\n    return (\n      <TouchableOpacity onPress={() => onPress({})}>\n        <Text style={styles.calloutText}>\n          Click here to create a new thread\n        </Text>\n      </TouchableOpacity>\n    )\n  }\n\n  return (\n    <View>\n      <Text style={styles.calloutText}>Click on a message to reply</Text>\n    </View>\n  )\n}\n\nfunction useMessages(listRef) {\n  const [lists, setLists] = React.useState([])\n  React.useEffect(() => {\n    // returning the onSnapshot result will result in\n    // the listener being cancelled on unmount.\n    const query = db\n      .collection(COLLECTIONS.messages)\n      .orderBy('createdAt', 'desc')\n\n    query.limit(6).onSnapshot(snapshot => {\n      const newMessages = []\n      snapshot.forEach(doc => {\n        newMessages.unshift({\n          id: doc.id,\n          ...doc.data()\n        })\n      })\n\n      const msgs = removeDuplicates([...lists, ...newMessages], 'id')\n\n      setLists(msgs)\n      if (listRef.current) {\n        // TODO only scroll to bottom if the user\n        // sent the message themselves.\n        // Or if they are currently scrolled to bottom.\n        setTimeout(() => {\n          listRef.current.scrollToEnd()\n        }, 200)\n      }\n    })\n  }, [])\n\n  return [lists, setLists]\n}\n\nexport default function MessageList({ threadRef, onPress }) {\n  const listRef = React.useRef()\n  const [refreshing, setRefreshing] = React.useState(false)\n  const [messages, setMessages] = useMessages(listRef)\n\n  function refresh() {\n    if (refreshing) {\n      return\n    }\n    setRefreshing(true)\n    const first = messages[0]\n    return db\n      .collection(COLLECTIONS.messages)\n      .orderBy('createdAt', 'desc')\n      .startAfter(first.createdAt)\n      .limit(6)\n      .get()\n      .then(snapshot => {\n        const prevMessages = snapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }))\n        setMessages([...prevMessages.reverse(), ...messages])\n      })\n      .then(() => setRefreshing(false))\n      .catch(() => setRefreshing(false))\n  }\n\n  return (\n    <View style={styles.container}>\n      <FlatList\n        ref={listRef}\n        style={styles.list}\n        data={messages}\n        refreshControl={\n          <RefreshControl refreshing={refreshing} onRefresh={refresh} />\n        }\n        keyExtractor={({ id }) => id}\n        renderItem={({ item }) => <Message item={item} onPress={onPress} />}\n        ListFooterComponent={() => (\n          <Callout threadRef={threadRef} onPress={onPress} />\n        )}\n      />\n    </View>\n  )\n}\n","import * as React from 'react'\nimport { View, TextInput, TouchableOpacity, StyleSheet } from 'react-native'\nimport { Ionicons } from '@expo/vector-icons'\nimport { colorHash } from '../utils'\nimport { db } from '../firebase'\nimport { COLLECTIONS } from '../constants/Api'\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    backgroundColor: '#fff',\n    minHeight: 80,\n    alignItems: 'stretch'\n  },\n  input: {\n    flex: 7,\n    paddingLeft: 10,\n    paddingRight: 10\n  },\n  button: {\n    flex: 3,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  buttonText: {\n    textAlign: 'center',\n    color: '#fff'\n  }\n})\n\nexport default function MessageInput({ threadRef }) {\n  const [text, setText] = React.useState('')\n\n  const addMessage = () => {\n    if (text === '') {\n      throw new Error('Invalid Message')\n    }\n    db.collection(COLLECTIONS.messages).add({\n      text,\n      createdAt: Date.now(),\n      threadRef: threadRef\n        ? threadRef\n        : db.collection(COLLECTIONS.threads).doc()\n    })\n\n    setText('')\n  }\n\n  return (\n    <View style={styles.container}>\n      <TextInput\n        multiline={true}\n        style={styles.input}\n        placeholder={threadRef ? 'Reply to thread.' : 'Start a new thread.'}\n        onChangeText={setText}\n        value={text}\n      />\n      <TouchableOpacity\n        style={[\n          {\n            backgroundColor: threadRef ? colorHash.dark.hex(threadRef.id) : null\n          },\n          styles.button\n        ]}\n        onPress={addMessage}\n      >\n        <View>\n          <Ionicons\n            style={[\n              styles.buttonText,\n              {\n                color: !threadRef ? 'black' : 'white'\n              }\n            ]}\n            name=\"md-send\"\n          />\n        </View>\n      </TouchableOpacity>\n    </View>\n  )\n}\n","import * as WebBrowser from 'expo-web-browser'\nimport * as React from 'react'\nimport {\n  Image,\n  Platform,\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  View\n} from 'react-native'\nimport { ScrollView } from 'react-native-gesture-handler'\nimport MessageList from '../components/MessageList'\nimport MessageInput from '../components/MessageInput'\nimport { MonoText } from '../components/StyledText'\n\nexport default function HomeScreen() {\n  const [selectedMessage, selectMessage] = React.useState({})\n  return (\n    <View style={styles.container}>\n      <MessageList\n        threadRef={selectedMessage.threadRef}\n        onPress={selectMessage}\n      />\n      <MessageInput threadRef={selectedMessage.threadRef} />\n    </View>\n  )\n}\n\nHomeScreen.navigationOptions = {\n  header: null\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff'\n  },\n  developmentModeText: {\n    marginBottom: 20,\n    color: 'rgba(0,0,0,0.4)',\n    fontSize: 14,\n    lineHeight: 19,\n    textAlign: 'center'\n  },\n  contentContainer: {\n    paddingTop: 30\n  },\n  welcomeContainer: {\n    alignItems: 'center',\n    marginTop: 10,\n    marginBottom: 20\n  },\n  welcomeImage: {\n    width: 100,\n    height: 80,\n    resizeMode: 'contain',\n    marginTop: 3,\n    marginLeft: -10\n  },\n  getStartedContainer: {\n    alignItems: 'center',\n    marginHorizontal: 50\n  },\n  homeScreenFilename: {\n    marginVertical: 7\n  },\n  codeHighlightText: {\n    color: 'rgba(96,100,109, 0.8)'\n  },\n  codeHighlightContainer: {\n    backgroundColor: 'rgba(0,0,0,0.05)',\n    borderRadius: 3,\n    paddingHorizontal: 4\n  },\n  getStartedText: {\n    fontSize: 17,\n    color: 'rgba(96,100,109, 1)',\n    lineHeight: 24,\n    textAlign: 'center'\n  },\n  tabBarInfoContainer: {\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    right: 0,\n    ...Platform.select({\n      ios: {\n        shadowColor: 'black',\n        shadowOffset: { width: 0, height: -3 },\n        shadowOpacity: 0.1,\n        shadowRadius: 3\n      },\n      android: {\n        elevation: 20\n      }\n    }),\n    alignItems: 'center',\n    backgroundColor: '#fbfbfb',\n    paddingVertical: 20\n  },\n  tabBarInfoText: {\n    fontSize: 17,\n    color: 'rgba(96,100,109, 1)',\n    textAlign: 'center'\n  },\n  navigationFilename: {\n    marginTop: 5\n  },\n  helpContainer: {\n    marginTop: 15,\n    alignItems: 'center'\n  },\n  helpLink: {\n    paddingVertical: 15\n  },\n  helpLinkText: {\n    fontSize: 14,\n    color: '#2e78b7'\n  }\n})\n","import { Ionicons } from '@expo/vector-icons';\nimport * as WebBrowser from 'expo-web-browser';\nimport * as React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { RectButton } from 'react-native-gesture-handler';\n\nexport default function LinksScreen() {\n  return (\n    <View style={styles.container} contentContainerStyle={styles.contentContainer}>\n      <Text>Notifications will go here</Text> \n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fafafa',\n  },\n  contentContainer: {\n    paddingTop: 15,\n  },\n  optionIconContainer: {\n    marginRight: 12,\n  },\n  option: {\n    backgroundColor: '#fdfdfd',\n    paddingHorizontal: 15,\n    paddingVertical: 15,\n    borderWidth: StyleSheet.hairlineWidth,\n    borderBottomWidth: 0,\n    borderColor: '#ededed',\n  },\n  lastOption: {\n    borderBottomWidth: StyleSheet.hairlineWidth,\n  },\n  optionText: {\n    fontSize: 15,\n    alignSelf: 'flex-start',\n    marginTop: 1,\n  },\n});\n","import { createBottomTabNavigator } from '@react-navigation/bottom-tabs'\nimport * as React from 'react'\n\nimport TabBarIcon from '../components/TabBarIcon'\nimport HomeScreen from '../screens/HomeScreen'\nimport LinksScreen from '../screens/LinksScreen'\n\nconst BottomTab = createBottomTabNavigator()\nconst INITIAL_ROUTE_NAME = 'Home'\n\nexport default function BottomTabNavigator({ navigation, route }) {\n  // Set the header title on the parent stack navigator depending on the\n  // currently active tab. Learn more in the documentation:\n  // https://reactnavigation.org/docs/en/screen-options-resolution.html\n  navigation.setOptions({ headerTitle: getHeaderTitle(route) })\n\n  return (\n    <BottomTab.Navigator initialRouteName={INITIAL_ROUTE_NAME}>\n      <BottomTab.Screen\n        name=\"Home\"\n        component={HomeScreen}\n        options={{\n          title: 'Messages',\n          tabBarIcon: ({ focused }) => (\n            <TabBarIcon focused={focused} name=\"md-code-working\" />\n          )\n        }}\n      />\n      <BottomTab.Screen\n        name=\"Links\"\n        component={LinksScreen}\n        options={{\n          title: 'Notifications',\n          tabBarIcon: ({ focused }) => (\n            <TabBarIcon focused={focused} name=\"md-book\" />\n          )\n        }}\n      />\n    </BottomTab.Navigator>\n  )\n}\n\nfunction getHeaderTitle(route) {\n  const routeName =\n    route.state?.routes[route.state.index]?.name ?? INITIAL_ROUTE_NAME\n\n  switch (routeName) {\n    case 'Home':\n      return 'Threaded Messages'\n    case 'Links':\n      return 'Things you should see'\n    case 'Thread':\n      return '<ThreadName>'\n  }\n}\n","import './timer-config'\nimport * as React from 'react';\nimport { Platform, StatusBar, StyleSheet, View } from 'react-native';\nimport { SplashScreen } from 'expo';\nimport * as Font from 'expo-font';\nimport { Ionicons } from '@expo/vector-icons';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport BottomTabNavigator from './navigation/BottomTabNavigator';\nimport useLinking from './navigation/useLinking';\n\nconst Stack = createStackNavigator();\n\nexport default function App(props) {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n  const [initialNavigationState, setInitialNavigationState] = React.useState();\n  const containerRef = React.useRef();\n  const { getInitialState } = useLinking(containerRef);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHide();\n\n        // Load our initial navigation state\n        setInitialNavigationState(await getInitialState());\n\n        // Load fonts\n        await Font.loadAsync({\n          ...Ionicons.font,\n          'space-mono': require('./assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hide();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  if (!isLoadingComplete && !props.skipLoadingScreen) {\n    return null;\n  } else {\n    return (\n      <View style={styles.container}>\n        {Platform.OS === 'ios' && <StatusBar barStyle=\"default\" />}\n        <NavigationContainer ref={containerRef} initialState={initialNavigationState}>\n          <Stack.Navigator>\n            <Stack.Screen name=\"Root\" component={BottomTabNavigator} />\n          </Stack.Navigator>\n        </NavigationContainer>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n  },\n});\n","import { useLinking } from '@react-navigation/native';\nimport { Linking } from 'expo';\n\nexport default function(containerRef) {\n  return useLinking(containerRef, {\n    prefixes: [Linking.makeUrl('/')],\n    config: {\n      Root: {\n        path: 'root',\n        screens: {\n          Home: 'home',\n          Links: 'links',\n          Settings: 'settings',\n        },\n      },\n    },\n  });\n}\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","import {Platform, InteractionManager} from 'react-native';\n\nconst _setTimeout = global.setTimeout;\nconst _clearTimeout = global.clearTimeout;\nconst MAX_TIMER_DURATION_MS = 60 * 1000;\nif (Platform.OS === 'android') {\n// Work around issue `Setting a timer for long time`\n// see: https://github.com/firebase/firebase-js-sdk/issues/97\n    const timerFix = {};\n    const runTask = (id, fn, ttl, args) => {\n        const waitingTime = ttl - Date.now();\n        if (waitingTime <= 1) {\n            InteractionManager.runAfterInteractions(() => {\n                if (!timerFix[id]) {\n                    return;\n                }\n                delete timerFix[id];\n                fn(...args);\n            });\n            return;\n        }\n\n        const afterTime = Math.min(waitingTime, MAX_TIMER_DURATION_MS);\n        timerFix[id] = _setTimeout(() => runTask(id, fn, ttl, args), afterTime);\n    };\n\n    global.setTimeout = (fn, time, ...args) => {\n        if (MAX_TIMER_DURATION_MS < time) {\n            const ttl = Date.now() + time;\n            const id = '_lt_' + Object.keys(timerFix).length;\n            runTask(id, fn, ttl, args);\n            return id;\n        }\n        return _setTimeout(fn, time, ...args);\n    };\n\n    global.clearTimeout = id => {\n        if (typeof id === 'string' && id.startsWith('_lt_')) {\n            _clearTimeout(timerFix[id]);\n            delete timerFix[id];\n            return;\n        }\n        _clearTimeout(id);\n    };\n}\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";"],"sourceRoot":""}